hsexpList<-hsexpList[hsexpList$antigen_class=="TFs and others",]
unique(hsexpList$cell_type)
typelist<-c("Embryonic Stem Cells","hESC derived mesendodermal cells","hESC derived neural cells","hESC derived neural crests","hESC derived endodermal cells","hESC derived pancreatic cells","hESC derived cardiac cells","hESC derived retinal cells","hESC derived epidermal cells","hESC derived mesodermal cells","hESC derived ectodermal cells")
hsexpList<-hsexpList[hsexpList$cell_type %in% typelist,]
endoderm_TFs<-hsexpList$antigen[hsexpList$cell_type=="hESC derived endodermal cells"]
mesoderm_TFs<-hsexpList$antigen[hsexpList$cell_type=="hESC derived mesodermal cells"]
neural_TFs<-hsexpList$antigen[hsexpList$cell_type %in% c("hESC derived ectodermal cells","hESC derived neural cells","hESC derived neural crests")]
endoderm_TFs
mesoderm_TFs
neural_TFs
tflist
mmexpList[mmexpList$antigen=="Foxa2",]
mmexpList<-expList[expList$assembly=="mm9",]
mmexpList<-mmexpList[mmexpList$antigen_class=="TFs and others",]
glexpList<-mmexpList[mmexpList$cell_type %in% c("mESC derived mesodermal cells","mESC derived endoodermal cells","mESC derived neural cells"),]
endoderm_TFs<-glexpList$antigen[glexpList$cell_type=="mESC derived endoodermal cells"]
mesoderm_TFs<-glexpList$antigen[glexpList$cell_type=="mESC derived mesodermal cells"]
neural_TFs<-glexpList$antigen[glexpList$cell_type=="mESC derived neural cells"]
head(glexpList)
colnames(glexpList)
g1expList[1]
glexpList[1]
glexpList[18]
glexpList[19]
remotes::install_github("dynverse/dyngen", dependencies = TRUE)
diffnet_filter_acc<-function(diffnet,gs_df,gs_full){
df<-lapply(diffnet,function(x) x[x$TG %in% unique(gs_full$TG),])
df<-lapply(df,function(x) x[x$TF %in% unique(gs_full$TF),])
tfonly<-lapply(df,function(x) x[x$TG %in% unique(gs_full$TF),])
nrows<-sapply(df,function(x) nrow(x))
nsupported<-sapply(df,function(x) sum(paste(x$TF,x$TG) %in% paste(gs_df$TF,gs_df$TG)))
ntfrows<-sapply(tfonly,function(x) nrow(x))
ntfsupported<-sapply(tfonly,function(x) sum(paste(x$TF,x$TG) %in% paste(gs_df$TF,gs_df$TG)))
res<-data.frame(epoch=names(nrows),filtered_interactions=nrows,n_supported=nsupported,filtered_TFinteractions=ntfrows,n_TFsupported=ntfsupported)
res$accuracy<-res$n_supported/res$filtered_interactions
res$TFonly_accuracy<-res$n_TFsupported/res$filtered_TFinteractions
res
}
load("~/Desktop/LabThings/Epoch/network_comparison/pseudo_chip_network/fimo_network_full_qval_filtered_011221.rda")
load("~/Desktop/LabThings/Epoch/network_comparison/pseudo_chip_network/fimo_network_endo_qval_filtered_011221.rda")
load("~/Desktop/LabThings/Epoch/network_comparison/pseudo_chip_network/fimo_network_meso_qval_filtered_011221.rda")
load("~/Desktop/LabThings/Epoch/network_comparison/pseudo_chip_network/fimo_network_ne_qval_filtered_011221.rda")
# endo vs meso
load("~/Desktop/LabThings/Epoch/20200121rescue_20101205_multiseq_reprocess20201020/analysis_112320/by_path_endo_meso/p1_on_112320.rda")
load("~/Desktop/LabThings/Epoch/20200121rescue_20101205_multiseq_reprocess20201020/analysis_112320/by_path_endo_meso/p2_on_112320.rda")
meso_acc<-diffnet_filter_acc(p1_on,fimo_meso,fimo_filtered)
meso_acc
load("~/Desktop/LabThings/Epoch/network_comparison/pseudo_chip_network/fimo_network_full_pval_filtered_011221.rda")
load("~/Desktop/LabThings/Epoch/network_comparison/pseudo_chip_network/fimo_network_endo_pval_filtered_011221.rda")
load("~/Desktop/LabThings/Epoch/network_comparison/pseudo_chip_network/fimo_network_meso_pval_filtered_011221.rda")
load("~/Desktop/LabThings/Epoch/network_comparison/pseudo_chip_network/fimo_network_ne_pval_filtered_011221.rda")
# endo vs meso
load("~/Desktop/LabThings/Epoch/20200121rescue_20101205_multiseq_reprocess20201020/analysis_112320/by_path_endo_meso/p1_on_112320.rda")
load("~/Desktop/LabThings/Epoch/20200121rescue_20101205_multiseq_reprocess20201020/analysis_112320/by_path_endo_meso/p2_on_112320.rda")
meso_acc<-diffnet_filter_acc(p1_on,fimo_meso,fimo_filtered)
meso_acc
library(fgsea)
data("examplePathways")
data("exampleRanks")
examplePathways
head(exampleRanks)
exampleRanks
remotes::install_github("coolbutuseless/ggpattern")
library(ggpattern)
g1<-ggplot(toplot,aes(x=treatment,y=value))+geom_col_pattern(aes(pattern=variable,fill=variable,pattern_fill=variable))+
geom_text(aes(y=value,label=scales::percent(value)),position=position_stack(vjust = 0.5),size=3)+
geom_text(aes(label=paste0("(",count,")"),vjust=+2.5),position=position_stack(vjust = 0.5),size=3)+
coord_flip()+theme_classic()+
theme(axis.title.x = element_blank(),axis.title.y=element_blank(),legend.title=element_blank(),legend.key.width=unit(.5,'cm'),legend.position="bottom",axis.text.y = element_text(size=10))
library(gggplot2)
library(ggplot2)
g1<-ggplot(toplot,aes(x=treatment,y=value))+geom_col_pattern(aes(pattern=variable,fill=variable,pattern_fill=variable))+
geom_text(aes(y=value,label=scales::percent(value)),position=position_stack(vjust = 0.5),size=3)+
geom_text(aes(label=paste0("(",count,")"),vjust=+2.5),position=position_stack(vjust = 0.5),size=3)+
coord_flip()+theme_classic()+
theme(axis.title.x = element_blank(),axis.title.y=element_blank(),legend.title=element_blank(),legend.key.width=unit(.5,'cm'),legend.position="bottom",axis.text.y = element_text(size=10))
library(networkD3)
URL <- "https://cdn.rawgit.com/christophergandrud/networkD3/master/JSONdata/energy.json"
Energy <- jsonlite::fromJSON(URL)
head(Energy$links)
head(energy$nodes)
head(Energy$nodes)
class(Energy$links$source)
data (sales)
freq$number<-1:14
p <- sankeyNetwork(Links = Energy$links, Nodes = Energy$nodes, Source = "source",
Target = "target", Value = "value", NodeID = "name",
units = "TWh", fontSize = 12, nodeWidth = 30)
p
class(Energy$links$value)
energy$links$energy_type <- sub(' .*', '',
energy$nodes[energy$links$source + 1, 'name'])
Energy$links$energy_type <- sub(' .*', '',
energy$nodes[energy$links$source + 1, 'name'])
Energy$links$energy_type <- sub(' .*', '',
Energy$nodes[Energy$links$source + 1, 'name'])
head(Energy$links)
ankeyNetwork(Links = Energy$links, Nodes = Energy$nodes, Source = 'source',
Target = 'target', Value = 'value', NodeID = 'name',
LinkGroup = 'energy_type', NodeGroup = NULL)
sankeyNetwork(Links = Energy$links, Nodes = Energy$nodes, Source = 'source',
Target = 'target', Value = 'value', NodeID = 'name',
LinkGroup = 'energy_type', NodeGroup = NULL)
load("~/Desktop/LabThings/Epoch/20200121rescue_20101205_multiseq_reprocess20201020/analysis_20210126/WAG/WAG_p1epochs.rda")
p1epochs_wag<-p1epochs
load("~/Desktop/LabThings/Epoch/20200121rescue_20101205_multiseq_reprocess20201020/analysis_20210126/WA/WA_p1epochs.rda")
p1epochs_wa<-p1epochs
epochs<-list(WAG=p1epochs_wag,WA=p1epochs_wa)
p1epochs_wag
epochs
epochs<-lapply(epochs,function(x){x$mean_expression<-NULL;x})
epochs
mapply(c,epochs)
unlist(epochs)
mapply(epochs,function(x){x})
mapply(c,epochs)
mapply(c,epochs[[1]])
epochs[[1]]
mapply(c,epochs[1])
do.call(Map(c),epochs)
do.call(c,epochs)
do.call(unique,epochs)
do.call(mapply,c(FUN=c,sapply(epochs,as.symbol)))
do.call(mapply,c(FUN=c,sapply(names(epochs),as.symbol)))
names(epochs)
sapply(names(epochs),as.symbol)
names(epochs[[1]])
names(epochs)
epochs[e]
epochs["WAG"]
epochs[["WAG"]]
temp <- vector(mode = "list", length = length(names(epochs[[1]])))
names(temp)<-names(epochs[[1]])
for (e in names(epochs)){
temp<-Map(c,temp,epochs[[e]])
}
temp
temp<-sapply(temp,unique)
temp
early<-connect(filename = '~/Desktop/LabThings/Epoch/Epoch/master/warpnet/data/NaiveToPrimed_DPT.loom', mode="r+",skip.validate=TRUE)
library(loomR)
early<-connect(filename = '~/Desktop/LabThings/Epoch/Epoch/master/warpnet/data/NaiveToPrimed_DPT.loom', mode="r+",skip.validate=TRUE)
early
early$link_delete(name = paste0("col_attrs/", "condition"))
early[['col_attrs']]
early$link_delete(name = paste0("col_attrs/", "leiden_R"))
early$link_delete(name = paste0("col_attrs/", "leiden_refined"))
early$link_delete(name = paste0("col_attrs/", "log1p_n_genes_by_counts"))
early$link_delete(name = paste0("col_attrs/", "log1p_total_counts"))
early$link_delete(name = paste0("col_attrs/", "n_counts"))
early$link_delete(name = paste0("col_attrs/", "n_genes_by_counts"))
early$link_delete(name = paste0("col_attrs/", "p1_velocity_pseudotime"))
early$link_delete(name = paste0("col_attrs/", "p2_velocity_pseudotime"))
early$link_delete(name = paste0("col_attrs/", "p3_velocity_pseudotime"))
early$link_delete(name = paste0("col_attrs/", "pct_counts_in_top_100_genes"))
early$link_delete(name = paste0("col_attrs/", "pct_counts_in_top_200_genes"))
early$link_delete(name = paste0("col_attrs/", "pct_counts_in_top_500_genes"))
early$link_delete(name = paste0("col_attrs/", "pct_counts_in_top_50_genes"))
early$link_delete(name = paste0("col_attrs/", "percent_mito"))
early$link_delete(name = paste0("col_attrs/", "sampClass"))
early$link_delete(name = paste0("col_attrs/", "timepoint"))
early$link_delete(name = paste0("col_attrs/", "total_counts"))
early$link_delete(name = paste0("col_attrs/", "treatment"))
early$link_delete(name = paste0("col_attrs/", "velocity_confidence"))
early$link_delete(name = paste0("col_attrs/", "velocity_confidence_transition"))
early$link_delete(name = paste0("col_attrs/", "velocity_length"))
early$link_delete(name = paste0("col_attrs/", "velocity_pseudotime"))
early$link_delete(name = paste0("col_attrs/", "velocity_self_transition"))
early[['col_attrs']]
early
early[['layers']]
early[['row_attrs']]
print(early[['row_attrs']])
early[['row_attrs/Accenssion']]
early[['row_attrs/Accession']]
early$link_delete(name = paste0("row_attrs/", "Accession"))
early$link_delete(name = paste0("row_attrs/", "Chromosome"))
early$link_delete(name = paste0("row_attrs/", "End"))
early$link_delete(name = paste0("row_attrs/", "Start"))
early$link_delete(name = paste0("row_attrs/", "Strand"))
early$link_delete(name = paste0("row_attrs/", "log1p_mean_counts"))
early$link_delete(name = paste0("row_attrs/", "log1p_total_counts"))
early$link_delete(name = paste0("row_attrs/", "mean_counts"))
early$link_delete(name = paste0("row_attrs/", "n_cells"))
early[['row_attrs']]
early$link_delete(name = paste0("row_attrs/", "n_cells_by_counts"))
early$link_delete(name = paste0("row_attrs/", "pct_dropout_by_counts"))
early$link_delete(name = paste0("row_attrs/", "total_counts"))
early$link_delete(name = paste0("row_attrs/", "velocity_gamma"))
early$link_delete(name = paste0("row_attrs/", "velocity_genes"))
early$link_delete(name = paste0("row_attrs/", "velocity_r2"))
early[['row_attrs']]
early
early[['col_graphs']]
early[['row_graphs']]
early$close_all()
rm(early)
early<-connect(filename = '~/Desktop/LabThings/Epoch/Epoch/master/warpnet/data/NaiveToPrimed_DPT.loom', mode="r+",skip.validate=TRUE)
early
early[['col_attrs']]
early[['row_attrs']]
early[['layers']]
early$link_delete(name = paste0("layers/", "Ms"))
early$link_delete(name = paste0("layers/", "Mu"))
early$link_delete(name = paste0("layers/", "variance_velocity"))
early$link_delete(name = paste0("layers/", "velocity"))
early[['layers']]
early$close_all()
rm(early)
library(loomR)
early<-connect(filename = '~/Desktop/LabThings/Epoch/Epoch/master/warpnet/data/NaiveToPrimed_DPT.loom', mode="r+",skip.validate=TRUE)
early[['layers']]
early
early[['row_attrs']]
early[['col_attrs']]
x=list(a=c("a","b","c"),b=c("c","d","e"),c=c("1","2"))
y=list(a=c("f","g","h"),b=c("b","d","e"),c=c("3","2"))
x
y
list(x=x,y=y)
epochs<-list(x=x,y=y)
mapply(c,epochs)
sapply(mapply(c,),unique)
sapply(epochs,mapply(c,),unique)
sapply(mapply(c,epochs),unique)
sapply(mapply(c,),unique)
epochs
mapply(c,epochs)
c(mapply(c,epochs))
epochs
do.call(c,epochs)
do.call(mapply(c,),epochs)
do.call(map,epochs)
do.call(Map,epochs)
do.call(Map(),epochs)
do.call(c,epochs)
epochs
do.call(c,lapply,epochs)
vecs <- unlist(epochs, recursive = F)
lapply(unique(names(vecs)), function(name) do.call(c, vecs[name == names(vecs)]))
vecs
rm(vecs)
unlist(epochs)
unlist(epochs,recursive=F)
vecs <- unlist(epochs, recursive = F)
lapply(unique(names(vecs)), function(name) do.call(c, vecs[name == names(vecs)]))
names(vecs)
unique(names(vecs))
epochs
names(unlist(epochs,recursive=FALSE,use.names=FALSE))
names(unlist(epochs,recursive=FALSE))
unlist(epochs,recursive=FALSE,use.names=FALSE)
names(unlist(epochs,recursive=FALSE))
vecs <- unlist(epochs, recursive = F)
lapply(unique(names(vecs)), function(name) do.call(c, vecs[name == names(vecs)]))
vecs
unique(names(vecs))
vecs <- unlist(epochs, recursive = F)
lapply(unique(names(vecs)), function(name) do.call(c, vecs[name == names(vecs)]))
names(vecs)
vecs
sub('.*\\.', '', names(vecs))
vecs
names(vecs)<-sub('.*\\.', '', names(vecs))
vecs
lapply(unique(names(vecs)), function(name) do.call(c, vecs[name == names(vecs)]))
lapply(unique(names(vecs)), function(name) mapply(c, vecs[name == names(vecs)]))
vecs
lapply(unique(names(vecs)), function(name) lapply(c, vecs[name == names(vecs)]))
lapply(unique(names(vecs)), function(name) sapply(c, vecs[name == names(vecs)]))
lapply(unique(names(vecs)), function(name) mapply(c, vecs[name == names(vecs)]))
lapply(unique(names(vecs)), function(name) lapply(vecs[name == names(vecs)],c))
lapply(unique(names(vecs)), function(name) sapply(vecs[name == names(vecs)],c))
lapply(unique(names(vecs)), function(name) flatten(sapply(vecs[name == names(vecs)],c)))
lapply(unique(names(vecs)), function(name) unlist(sapply(vecs[name == names(vecs)],c)))
lapply(unique(names(vecs)), function(name) as.vector(sapply(vecs[name == names(vecs)],c)))
unique(names(vecs))
vecs <- unlist(epochs, recursive = F)
names(vecs)<-sub('.*\\.', '', names(vecs))
vecs2<-lapply(unique(names(vecs)), function(name) as.vector(sapply(vecs[name == names(vecs)],c)))
names(vecs2)<-unique(names(vecs))
vecs2<-lapply(vecs2,unique)
vvecs
vecs2
temp <- vector(mode = "list", length = length(names(vecs2[[1]])))
temp
temp <- vector(mode = "list", length = length(names(epochs[[1]])))
names(temp)<-names(epochs[[1]])
temp
for (e in names(epochs)){
temp<-Map(c,temp,epochs[[e]])
}
temp
epochs<-sapply(temp,unique)
epochs
library(dyngen)
install.packages("dyngen")
remove.packages("dyngen")
install.packages("dyngen")
library(tidyverse)
library(dyngen)
set.seed(1)
backbone <- backbone_bifurcating()
install.packages(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
library(dyngen)
set.seed(1)
backbone <- backbone_bifurcating()
config <-
initialise_model(
backbone = backbone,
num_cells = 1000,
num_tfs = nrow(backbone$module_info),
num_targets = 250,
num_hks = 250,
simulation_params = simulation_default(
census_interval = 10,
ssa_algorithm = ssa_etl(tau = 300 / 3600),
experiment_params = simulation_type_wild_type(num_simulations = 100)
)
)
model_common <-
config %>%
generate_tf_network() %>%
generate_feature_network() %>%
generate_kinetics() %>%
generate_gold_standard()
model_wt <- model_common %>%
generate_cells()
plot_gold_mappings(model_wt, do_facet = FALSE)
b3_genes <- model_common$feature_info %>% filter(module_id == "B3") %>% pull(feature_id)
b3_genes
model_ko <- model_common
model_ko$simulation_params$experiment_params <- simulation_type_knockdown(
num_simulations = 100L,
timepoint = 0,
genes = b3_genes,
num_genes = length(b3_genes),
multiplier = 0
)
model_ko <- model_ko %>%
generate_cells()
plot_gold_mappings(model_ko, do_facet = FALSE)
load("~/Desktop/model_102519.rda")
model$simulation_system$reactions
model$simulation_system$reactions[1:10]
model$simulation_system$reactions[50:60]
sapply(model$simulation_system$reactions,function(x) x$name=="rxn"transcription_B1_TF1"")
sapply(model$simulation_system$reactions,function(x) x$name=="transcription_B1_TF1")
cond<-sapply(model$simulation_system$reactions,function(x) x$name=="transcription_B1_TF1")
model$simulation_system$reactions[50:60]
reg<-gsub("(.*);.*","\\1",model$simulation_system$reactions[cond][[1]]$propensity)
reg
model$simulation_system$reactions[cond][[1]]$propensity
library(epoch)
list12<-loadDataFromLoom()
list12<-loadDataFromLoom("~/Desktop/LabThings/Epoch/Epoch/master/warpnet/data/sampled_mesoderm_WAG.loom")
sampTab<-list12[['sampTab']]
head(sampTab)
library(epoch)
packageVersion("loomR")
library(loomR)
lfile <- connect(filename = '~/Desktop/LabThings/Epoch/20200121rescue_20101205_multiseq_reprocess20201020/20191205multiseq_scvelo_20201020.loom', skip.validate=TRUE)
col_attrs<-lfile[['col_attrs']]$names
lfile$get.attribute.df(attributes=col_attrs)
lfile$get.attribute.df(attributes=col_attrs,col.names='obs_names')
lfile$get.attribute.df(attribute.names=col_attrs,col.names='obs_names')
sampTab<-tryCatch({lfile$get.attribute.df(attributes = col_attrs, col.names='obs_names')},
error=function(e){
lfile$get.attribute.df(attribute.names = col_attrs, col.names='obs_names')
})
sampTab2<-tryCatch({lfile$get.attribute.df(attribute.names = col_attrs, col.names='obs_names')},
error=function(e){
lfile$get.attribute.df(attributes = col_attrs, col.names='obs_names')
})
head(sampTab2)
head(sampTab)
load("~/Desktop/LabThings/Epoch/20200121rescue_20101205_multiseq_reprocess20201020/analysis_112320/reconstruction_by_path_0zThresh/dynamicGRN_p1.rda")
load("~/Desktop/LabThings/Epoch/20200121rescue_20101205_multiseq_reprocess20201020/analysis_112320/reconstruction_by_path_0zThresh/staticGRN_p1_crossweight.rda")
head(p1grnDF)
grn<-p1grnDF[p1grnDF$weighted_score>2.5,]
grn<-p1grnDF[p1grnDF$weighted_score>3,]
head(grn)
grnDF[grnDF$TF=="Meox1",]
grn[grn$TF=="Meox1",]
p1grnDF[p1grnDF$TF=="meox1",]
p1grnDF[p1grnDF$TF=="Meox1",]
p1grnDF[p1grnDF$TF=="Meox1" & p1grnDF$weighted_score>1,]
load("~/Desktop/LabThings/Epoch/invivo_comparison/Grosswendt/20210817_mesoderm_comparision/in_vivo_on.rda")
lapply(in_vivo_on,function(x){x[x$TF=="Meox1",]})
lapply(in_vivo_on,function(x){x[x$TF=="Cited1",]})
lapply(p1dynamic_grn,function(x){x[x$TF=="Cited1",]})
lapply(p1dynamic_grn,function(x){x[x$TF=="Cited1" & x$weighted_score>2.5,]})
lapply(p1dynamic_grn,function(x){x[x$TF=="Cited1" & x$weighted_score>1.5,]})
lapply(in_vivo_on,function(x){x[x$TF=="Cited1",]})
load("~/Desktop/LabThings/Epoch/synthetic_data/analysis_050720_2/aupr_summary_050720_2.rda")
summary2<-summary
load("~/Desktop/LabThings/Epoch/synthetic_data/analysis_050720/aupr_summary_050720.rda")
summ<-rbind(summary,summary2)
toplot<-summ[summ$method %in% c("CLR_pearson","CLR_pearson_crossweight","CLR_MI","CLR_MI_crossweight","GENIE3","GENIE3_dyn","GENIE3_dyn_crossweight","Epoch_pearson","Epoch_pearson_crossweight","Epoch_MI","Epoch_MI_crossweight"),]
# re-name methods for the plot
toplot$method<-as.character(toplot$method)
toplot$method[toplot$method=="CLR_pearson"]<-"CLR_Pearson"
toplot$method[toplot$method=="CLR_pearson_crossweight"]<-"CLR_Pearson_crossweight"
toplot$method[toplot$method=="Epoch_pearson"]<-"Epoch_Pearson"
toplot$method[toplot$method=="Epoch_pearson_crossweight"]<-"Epoch_Pearson_crossweight"
toplot$method<-factor(toplot$method,levels=c("CLR_Pearson","CLR_Pearson_crossweight","CLR_MI","CLR_MI_crossweight","GENIE3","GENIE3_dyn","GENIE3_dyn_crossweight","Epoch_Pearson","Epoch_Pearson_crossweight","Epoch_MI","Epoch_MI_crossweight"))
toplot$base_method<-"CLR"
toplot$base_method[toplot$method %in% c("Epoch_Pearson","Epoch_Pearson_crossweight","Epoch_MI","Epoch_MI_crossweight")]<-"Epoch"
toplot$base_method[toplot$method %in% c("GENIE3","GENIE3_dyn","GENIE3_dyn_crossweight")]<-"GENIE3"
head(toplot)
toplot
aggregate(toplot,by=list(method),FUN=mean)
aggregate(toplot,by=list("method"),FUN=mean)
aggregate(toplot[,c('method','aupr_ratio')],by=list("method"),FUN=mean)
aggregate(toplot[,c('method','aupr_ratio')],by=list(method),FUN=mean)
aggregate(aupr_ratio~method,data=toplot,mean)
BiocManager::install("tradeSeq")
library(tradeSeq)
library(epoch)
library(tradeSeq)
invivo<-loadDataFromLoom("~/Desktop/LabThings/Epoch/invivo_comparison/Grosswendt/adGrosswendt_trimmed250_raw_081621.loom")
rm(invivo)
raw<-loadDataFromLoom("~/Desktop/LabThings/Epoch/invivo_comparison/Grosswendt/adGrosswendt_trimmed250_raw_081621.loom")
raw_exp<-raw[['expDat']]
raw_exp[1:5,1:5]
list12<-loadDataFromLoom("~/Desktop/LabThings/Epoch/invivo_comparison/Grosswendt/adGrosswendt_trimmed250_dpt_20210817.loom")
expDat<-list12[['expDat']]
sampTab<-list12[['sampTab']]
expDat[1:5,1:5]
raw_exp<-raw_exp[,rownames(sampTab)]
raw_exp<-raw_exp[rownames(expDat),]
dim(raw_exp)
dim(sampTab)
sampTab_meso<-sampTab[sampTab$celltype %in% c("Epiblast","Primitive streak early","Primitive streak late","Mesoderm presomitic"),]
raw_exp<-raw_exp[,rownames(sampTab_meso)]
dim(raw_exp)
as.data.frame(sampTab_meso$dpt_pseudotime)
pt<-as.data.frame(sampTab_meso$dpt_pseudotime)
rownames(pt)<-rownames(sampTab_meso)
head(pt)
colnames(pt)<-"pseudotime"
head(pt)
ts<-fitGAM(as.matrix(raw_exp),pseudotime=as.matrix(pt))
as.matrix(rep(1,nrow(pt))
)
cw<-as.matrix(rep(1,nrow(pt)))
rownames(cw)<-rownames(sampTab_meso)
ts<-fitGAM(as.matrix(raw_exp),pseudotime=as.matrix(pt),cellWeights=cw)
ATres <- associationTest(ts)
head(ATres)
dgenes<-rownames(ATres)[ATres$pvalue<0.05]
length(dgenes)
load("~/Desktop/LabThings/Epoch/invivo_comparison/Grosswendt/20210817_mesoderm_comparision/mesoderm_sampled_xdyn.rda")
dgenes_epoch<-names(xdyn$genes)[xdyn$genes<0.05]
length(dgenes_epoch)
intersect(dgenes_epoch,dgenes)
length(intersect(dgenes_epoch,dgenes))
load("~/Desktop/LabThings/Epoch/mmTFs_123019.rda")
mmTFs <- setdiff(mmTFs, c("App", "Pcna"))
dtfs<-intersect(dgenes,mmTFs)
dtfs_epoch<-intersect(dgenes_epoch,mmTFs)
length(dtfs)
length(dtfs_epoch)
length(intersect(dtfs_epoch,dtfs))
ms <- loadDataFromLoom("~/Desktop/LabThings/Epoch/20200121rescue_20101205_multiseq_reprocess20201020/20191205multiseq_scvelo_20201020.loom")
exp_ms<-ms[['expDat']]
sampTab_ms<-ms[['sampTab']]
sampTab_ms<-sampTab_ms[sampTab_ms$leiden_refined %in% c("1","3","0","8"),]
exp_ms<-exp_ms[,rownames(sampTab_ms)]
raw<-loadDataFromLoom("~/Desktop/LabThings/Epoch/invivo_comparison/analysis_20210825/adRaw_012720.loom")
exp_invitro_raw<-invitro[['expDat']]
exp_invitro_raw<-exp_invitro_raw[rownames(exp_ms),]
exp_invitro_raw<-exp_invitro_raw[,rownames(sampTab_ms)]
exp_invitro_raw<-raw[['expDat']]
exp_invitro_raw<-exp_invitro_raw[rownames(exp_ms),]
exp_invitro_raw<-exp_invitro_raw[,rownames(sampTab_ms)]
pt<-as.data.frame(sampTab_ms$latent_time)
rownames(pt)<-rownames(sampTab_ms)
colnames(pt)<-"pseudotime"
cw<-as.matrix(rep(1,nrow(pt)))
rownames(cw)<-rownames(sampTab_ms)
ts<-fitGAM(as.matrix(exp_invitro_raw),pseudotime=as.matrix(pt),cellWeights=cw)
ATres <- associationTest(ts)
dgenes_ms<-rownames(ATres)[ATres$pvalue<0.05]
length(dgenes_ms)
length(intersect(dgenes_ms,dgenes))
dtfs_ms<-intersect(dgenes_ms,mmTFs)
length(dtfs_ms)
length(intersect(dtfs_ms,dtfs))
x <- 5
load("~/Desktop/LabThings/DesLO/reference_data/GSE115469/HumanLiver.RData")
sCVdL
load("~/Desktop/LabThings/DesLO/reference_data/GSE115469/HumanLiver_savedRes.RData")
savedRes
install.packages('Seurat')
rm(list=ls())
load("~/Desktop/LabThings/DesLO/reference_data/GSE115469/HumanLiver.RData")
HumanLiverSeurat
HumanLiverSeurat$res.0.8
HumanLiverSeurat$total_counts
HumanLiverSeurat$orig.ident
HumanLiverSeurat@meta.data
head(HumanLiverSeurat@meta.data)
HumanLiverSeurat@assays
HumanLiverSeurat@meta.data$res.0.8
metadata<-HumanLiverSeurat@meta.data
write.table(metadata,file="~/Desktop/LabThings/DesLO/reference_data/GSE115469/GSE115469_metadata.csv",sep=",",quote=FALSE)
setwd("~/Desktop/LabThings/Epoch/Epoch/master/warpnet")
devtools::document()
